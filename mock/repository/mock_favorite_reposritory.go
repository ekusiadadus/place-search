// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/ifavorite_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIFavoriteRepository is a mock of IFavoriteRepository interface
type MockIFavoriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFavoriteRepositoryMockRecorder
}

// MockIFavoriteRepositoryMockRecorder is the mock recorder for MockIFavoriteRepository
type MockIFavoriteRepositoryMockRecorder struct {
	mock *MockIFavoriteRepository
}

// NewMockIFavoriteRepository creates a new mock instance
func NewMockIFavoriteRepository(ctrl *gomock.Controller) *MockIFavoriteRepository {
	mock := &MockIFavoriteRepository{ctrl: ctrl}
	mock.recorder = &MockIFavoriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFavoriteRepository) EXPECT() *MockIFavoriteRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockIFavoriteRepository) FindAll(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockIFavoriteRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIFavoriteRepository)(nil).FindAll), arg0)
}

// Save mocks base method
func (m *MockIFavoriteRepository) Save(arg0 uint, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIFavoriteRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIFavoriteRepository)(nil).Save), arg0, arg1)
}

// Delete mocks base method
func (m *MockIFavoriteRepository) Delete(arg0 uint, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIFavoriteRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIFavoriteRepository)(nil).Delete), arg0, arg1)
}
